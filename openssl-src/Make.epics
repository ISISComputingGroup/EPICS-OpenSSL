# Note: called Make.epics rather than Makefile.epics due to .gitignore rule

TOP=..

include $(TOP)/configure/CONFIG
#----------------------------------------
#  ADD MACRO DEFINITIONS AFTER THIS LINE
#=============================

#==================================================
# build a support library

# remove EPICS default of -w which nmake does not like
override MAKEFLAGS=

ifeq ($(OS_CLASS),WIN32)
ifneq ($(findstring win32-x86,$(EPICS_HOST_ARCH)),)
OPENSSL_ARCH=VC-WIN32
DO_MS=ms\do_ms
else
OPENSSL_ARCH=VC-WIN64A
DO_MS=ms\do_win64a
endif
else
OPENSSL_ARCH=linux-x86_64
endif
ifneq ($(findstring static,$(EPICS_HOST_ARCH)),)
CONFIG_FLAGS += no-shared
endif
#===========================

include $(TOP)/configure/RULES
#----------------------------------------
#  ADD RULES AFTER THIS LINE

# linux-elf --debug --release no-shared
#	--with-zlib-include
#	--with-zlib-lib
# look at sepcifying shared and no-shared
# we copy libraries to "MDd" etc. to help cmake find the libraries later
ifdef T_A
install:
ifeq ($(OS_CLASS),Linux)
	$(CP) config.sh config
endif
	$(PERL) Configure $(OPENSSL_ARCH) $(CONFIG_FLAGS) no-asm zlib no-krb5 --prefix=$(abspath $(TOP)/install/$(T_A)) --openssldir=$(abspath $(TOP)/install/conf) --with-zlib-include=$(ZLIB)/include --with-zlib-lib=$(ZLIB)/lib/$(T_A)/zlib.lib
ifeq ($(OS_CLASS),WIN32)
	$(DO_MS)
	nmake -f ms/ntdll.mak OUT_D=out.$(T_A) TMP_D=tmp.$(T_A) INC_D=inc.$(T_A) INCO_D=inc.$(T_A)\openssl
	nmake -f ms/ntdll.mak install OUT_D=out.$(T_A) TMP_D=tmp.$(T_A) INC_D=inc.$(T_A) INCO_D=inc.$(T_A)\openssl
else
	make
	make install
endif
	-$(MKDIR) $(TOP)/bin
	-$(MKDIR) $(TOP)/bin/$(T_A)
	-$(MKDIR) $(TOP)/lib
	-$(MKDIR) $(TOP)/lib/$(T_A)
	-$(MKDIR) $(TOP)/include
	-$(MKDIR) $(TOP)/include/openssl
	$(CP) -f $(TOP)/install/$(T_A)/include/openssl/*.h* $(TOP)/include/openssl/
	$(CP) -f $(TOP)/install/$(T_A)/bin/* $(TOP)/bin/$(T_A)/
ifeq ($(OS_CLASS),WIN32)
	$(CP) -f $(TOP)/install/$(T_A)/lib/libeay32.lib $(TOP)/install/$(T_A)/lib/libeay32MD.lib
	$(CP) -f $(TOP)/install/$(T_A)/lib/libeay32.lib $(TOP)/install/$(T_A)/lib/libeay32MDd.lib
	$(CP) -f $(TOP)/install/$(T_A)/lib/ssleay32.lib $(TOP)/install/$(T_A)/lib/ssleay32MD.lib
	$(CP) -f $(TOP)/install/$(T_A)/lib/ssleay32.lib $(TOP)/install/$(T_A)/lib/ssleay32MDd.lib
	$(CP) -f $(TOP)/install/$(T_A)/lib/*.lib $(TOP)/lib/$(T_A)/
else
	-$(CP) -f $(TOP)/install/$(T_A)/lib/*.a $(TOP)/lib/$(T_A)/
	-$(CP) -f $(TOP)/install/$(T_A)/lib/*.so $(TOP)/lib/$(T_A)/
endif
endif

ifeq ($(findstring linux,$(EPICS_HOST_ARCH)),)
clean::
	nmake -f ms/ntdll.mak vclean OUT_D=out.$(EPICS_HOST_ARCH) TMP_D=tmp.$(EPICS_HOST_ARCH) INC_D=inc.$(EPICS_HOST_ARCH) INCO_D=inc.$(EPICS_HOST_ARCH)\openssl
endif
